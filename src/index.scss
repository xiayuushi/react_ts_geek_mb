* {
  margin: 0;
  padding: 0;
}

html,
body,
#root {
  height: 100%;
}


// 自定义主题色
// 01、之所以采用两个':root'是为了让我们自己写的自定义主题色覆盖antd默认的主题色
// 02、antd的默认主题色也是使用':root'来定义的，因此当我们需要覆盖antd的默认主题色时，直接使用两个':root'可以提升优先级对antd默认主题色进行覆盖
// 03、默认情况下我们定义的样式是会被antd给覆盖掉的，因为在使用antd组件时是后导入的，因此会覆盖我们自己写的样式
// 03、但是，当使用连续两个':root'来定义自定义主题色时，就能够通过优先级覆盖掉antd默认的主题色
// 04、下方`--xxx`是原生CSS的变量，定义时`--xxx: 值`，使用时`var(--xxx)`

:root:root {
  --adm-color-primary: #fc6627;
  --adm-color-success: #00b578;
  --adm-color-warning: #ff8f1f;
  --adm-color-danger: #ff3141;
  --adm-color-white: #ffffff;
  --adm-color-weak: #999999;
  --adm-color-light: #cccccc;
  --adm-border-color: #eeeeee;
  --adm-font-size-main: 13px;
  --adm-color-text: #333333;
}


// iconfont彩色字体图标通用样式（symbol使用方式）
// 彩色字体图标的使用（symbol方式引用流程）
// st1、在public/index.html中使用script标签引入iconfont的彩色字体图标
// st2、在项目全局通用样式src/index.scss中，设置iconfont字体通用css的icon类（具体参考下方`.icon`）
// st3、回到组件中以svg标签的方式使用字体图标（此时可以进行组件封装以便复用及更加符合项目业务要求）
// 例如：`<svg className="icon" aria-hidden="true"><use xlinkHref="#icon-xxx"></use></svg>`
// iconfont字体图标symbol使用方式参考：https://www.iconfont.cn/help/detail?spm=a313x.7781069.1998910419.d8cf4382a&helptype=code
// N1、彩色字体图标只能采用symbol的方式进行引用，其他两种使用方式（unicode与font-class）会自动去色
.icon {
  width: 1em;
  height: 1em;
  vertical-align: -0.15em;
  fill: currentColor;
  overflow: hidden;
}


// 移动端适配方案
// 方案1：rem + CSS媒体查询设置根元素的fontSize
// 方案2：rem + `amfe-flexible`+设置根元素的fontSize 
// 方案3：vw适配方案（需要借助插件`postcss-px-to-viewport`，推荐使用该方案）


// 使用`postcss-px-to-viewport`实现移动端vw适配的流程
// st1、安装`postcss-px-to-viewport`（指令：yarn add -D postcss-px-to-viewport）
// st2、在craco.config.js中配置（因为react项目中配置webpack文件被隐藏，因此需要通过craco的配置文件去覆盖）
// st2、var px2vw = require('postcss-px-to-viewport');
// st2、module.exports = { style: { postcss: { plugins: [px2vw({viewportWidth: 375})] }}}
// st3、后续书写CSS时直接使用px单位，px单位经过编译后会，会被转成适应视口的vw

// N1、viewportWidth用于指定设计稿的宽度
// N1、此处设置的是一倍图375宽度，测量1px就写1px会被`postcss-px-to-viewport`自动在编译后转成vw单位